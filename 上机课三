//A: 判断直角三角形
//第1行是一个整数n，表示随后有n组数据
//每组数据占一行，包含3个整数代表3条边长(每个整数的平方能够用32位整数表示)，用空格分隔。
//每组输出占一行，如果是直角三角形输出Yes，不是则输出No。
/*#include <stdio.h>
int main(){
	int n, i;//表示随后有n组数据和已输入的组数
	scanf("%d", &n);
	int a, b, c;
	
	for(i = 0;i < n;i++){
		scanf("%d %d %d", &a, &b, &c);
		getchar();
	if(a+b>c && a-b<c || a+c>b && a-c<b || b+c>a && b-c<a){
	if(a*a+b*b==c*c || a*a+c*c==b*b || b*b+c*c==a*a){printf("Yes\n");} 
	else printf("No\n");}
	else printf("No\n");}   
	return 0;
}*/


//B: 求绝对值最大的数
//每行输入包含一个测试用例，第一个整数m(1<=m<=20)，表示随后有m个整数,各数之间用空格分隔。
//每组输出占一行，输出绝对值最大的数。
#include <stdio.h>
#include <math.h>
int main(){
	int m; 
	int i = 0;//表示数组脚标
	int j, t;//用于冒泡排序 
	scanf("%d", &m);
	int A[m];
	while (i < m){
	scanf("%d", &A[i]);
	i++;}
	for(i = 0;i < m;i++){//从第一个开始比较 
		for(j = i;j < m;j++){//第一次不会满足a[i]>a[j},因此进入j+1，再进行比较 
			if(A[i] > A[j]){//这个是把第一个（之后是第二个......）和后面的每一个进行比较再排序 
			int t = A[j];
			A[j] = A[i];
			A[i] = t;
			}
		}
	
	}
	if((A[0] >= 0 && A[m - 1] >= 0) || (A[0] <= 0 && A[m - 1] <= 0)){
		printf("%d", A[m - 1]);
	}
	if( (A[m - 1] >= 0 && A[0] <=0) ){int b = abs(A[0]);
		
		if(b > A[m - 1]){printf("%d", A[0]);}}
	
	return 0;}

// C: 分解偶数
// 任何大于6的偶数都可以分解成两个奇质数的和。
//输入n，输出所有解，按小的在前，大的在后输出，不要重复。
#include <stdio.h>

int main() {
	int n, i, x;//输入偶数
	scanf("%d", &n);
	int sum = 0;
	int num = 0;
    
    if(n >= 6){
	if (n % 2 != 0) { printf("ERROR"); }
	if (n % 2 == 0) {
		for (i = 3;i < n / 2;i++) {
			sum = 0;num = 0;
			if(i % 2 == 0) {
				i++;}
			if (i % 2 != 0) {
				for(x = 2;x < i;x++){
			    if(i % x != 0){sum++;}}
			    for(x = 2;x < n - i;x++){
			    if((n - i) % x != 0){num++;}
				}
				}
				if(sum == i - 2 && num == n - i - 2){
				printf("%d %d\n", i, n - i);
			}
			}
		}
}
    else
      printf("ERROR");
		return 0;
}

// D: 显示柱状图
#include<iostream>
#include<string>
#include<cstdio>
#include<algorithm>
using namespace std;
char table[31][40];
int main(){
	int m;//声明一个变量m，即表的宽度 
	cin>>m;
	for(int i=0;i<=30;i++)//表示高度 
	{for(int j=0;j<40;j++)//表示宽 
		{table[i][j]=' ';//先把所有的搞成空格 
		}
	}
	for(int i=0;i<2*m-1;i++){
		table[15][i]='-';//先把x轴搞成-号 
	}
	int top=15,bottom=15;//从中间开始往上下走 
	for(int i=0;i<m;i++)//对输入进行操作 
	{
		int num;char c;
		scanf("%d%c",&num,&c);
		top=min(top,15-num);//最上面的行 
		bottom=max(bottom,15-num);//最下面的行 
		if(num<0){
			for(int j=16;j<16-num;j++){
				if(c==' '||c=='\n') table[j][2*i]='+';
				else table[j][2*i]=c;
			}
		}
		else if(num>0){
			for(int j=14;j>14-num;j--){
				if(c==' '||c=='\n') table[j][2*i]='+';
				else table[j][2*i]=c;
			}
		}
	}
	for(int i=top;i<=bottom;i++){
		for(int j=0;j<2*m-1;j++){printf("%c",table[i][j]);
		}	printf("\n");
	}
	return 0;
}

//统计回文数
#include<string.h>
#include<iostream>
#include<stdio.h>
#include<algorithm> 
using namespace std;

string num[100000];//回文数存在这个数组里
int cnt[100000];//相应脚标对应的回文数的出现次数
int pos=0;//脚标
string abc[100000];//表示新的数组，用来存最大数量的回文数的数组
int kk=0;//脚标
bool is_hui(string num){
	if(num.size()<2||num[0]=='0')return false;
	string a = num;
	reverse(a.begin(),a.end());
	if(a == num){
		return true;
	}
	else
	  return false;
}//自己创了一个函数，用来判断回文数
bool cmp(string _,string __){
	if(_.size()<__.size())return true;
	else if(_.size()==__.size()&&_<__)return true;
	else return false;
}//按照从小到大的顺序排序 
int main(){
	char a[1000000];
	memset(a,0,sizeof(a));//清空数组
	int size=0;
	while(scanf("%c",&a[size++])!=EOF);//存入已输入的字符到数组str中 
	string str=a;
	//cout<<str<<" "<<str.size()<<endl; 
	for(int i=0;i<str.size();i++){
		//如果扫到了数字且开头不是0
		if(str[i]>'0'&&str[i]<='9'){
			int right;//声明最右端的脚标
			for(right=i;right<str.size();right++){
				if(str[right]<'0'||str[right]>'9'){
					break;
				}
			}
			right--;//因为跳出循环的条件是非数字，那么在考虑数字整体时需要减一
			string temp=str.substr(i,right-i+1);//用temp字符串数组暂时存放提取出来的数字
			//如果是回文数 
			if(is_hui(temp)){
				//cout<<temp<<endl;
				int j=0;
				for(j;j<pos;j++){
					if(temp==num[j])break;
				}
				if(j==pos){
					num[pos]=temp;
					cnt[pos]=1;
					pos++;
				}else{
					cnt[j]++;
				}
			}
			i=right;
		}
	}
	if(pos==0){
		cout<<"None";
		return 0;
	}
	
	int x=cnt[0];
	for(int i = 0;i < pos;i++){
		if(cnt[i] >x) x = cnt[i];
	}//可以用max函数
	/*for(int i = 0;i < pos;i++){
	      x=max(x, cnt[i]);}*/ 
	/*for(int i = 0;i < pos;i++){
		if(cnt[i] == x){abc[kk++] =num[i];}
	}
	sort(abc,abc+kk,cmp);// 第一个是要排序的数组的起始地址。
    //第二个是结束的地址（最后一位要排序的地址）
    //第三个参数是排序的方法，可以是从大到小也可是从小到大
    //还可以不写第三个参数，此时默认的排序方法是从小到大排序。
	for(int i=0;i<kk;i++){
		cout<<abc[i]<<" "<<x<<endl;
	}
	return 0;
}
