//A: 大整数乘法
//计算两个大整数的积
//输入  第1行是一个整数n，表示随后有n组数据
//每组数据占一行，包含两个整数a b，用空格隔开 0 <= a,b <= 10^500(10的500次方)
//对每组数据输出两个整数的积，并换行 
#include <stdio.h>
#include <math.h>
#include <string.h>
#define M 1000
char s1[M], s2[M], s[M];
int a[100][M], b[100][M], c[100][M];

int main() {
	int B;  //输入的组数
	int h, i, j, m, n; //m、n为字符串s1、s2长度
	int k[100];  //将每一个m+n存入数组中
	scanf("%d", &B);
	memset(c, 0, sizeof(c));  //将数组c中元素全部初始化为0，没有此步骤也可以(因为数组c此时为全局变量，其中元素已经自动初始化为0)
	for (h = 0; h < B; h++) {
		scanf("%s%s", s1, s2);
		n = strlen(s1);
		m = strlen(s2);
		k[h] = n + m;	//保证相乘后的位数不会大于k【h】
		//把字符串s1和s2逆序用数字排列
		for (i = 0; i < n; i++)
			a[h][i] = s1[n - i - 1] - '0';  //隐式转化，0为int型（4字节），s[i]为char型(1字节)，故最终转化为int型
		for (i = 0; i < m; i++)
			b[h][i] = s2[m - 1 - i] - '0';
		//乘运算
		for (i = 0; i < n; i++)
			for (j = 0; j < m; j++)
				c[h][i + j] += a[h][i] * b[h][j];
		//进位
		for (i = 0; i <= k[h]; i++) {
			if (c[h][i] >= 10) {
				c[h][i + 1] += c[h][i] / 10;
				c[h][i] %= 10;
			}
		}
	}
	for (h = 0; h < B; h++) {
		//除去多余的0，若无此步骤，则输出20*3的结果为060，输出20*6的结果为120；
		i = k[h];
		while (c[h][i] == 0)
			i--;
		//逆序打印c[][]
		while (i >= 0)
			printf("%d", c[h][i]), i--;
		printf("\n");
	}
	return 0;
}

//B:字符串右移问题 
#include <stdio.h>
#include <string.h>
int main(){
	//将一个字符串循环向左移M（M>=0）个字符位置，
	//即将字符串A中的数据由（A0 A1……AN-1）
	//变换为（AN-M …… AN-1 A0 A1……AN-M-1）
	//（N是字符串的长度，最后M个数循环移至最前面的M个位置）
	//每个输入包含一个测试用例，第1行输入M（M>=0）；第2行为输入字符串，长度不超过200。
    int M, i;
	int j = 0;//声明输入的希望左移的字符位置和数组的脚标 
	//建立数组来进行处理（冒泡排序作改编）
	char A[200];
	int a = 200;

	scanf("%d\n", &M);
	fgets(A, a, stdin);
    A[strlen(A)-1]='\0';
    int len = strlen(A);
	for(i = len - M;i <= len - 1;i++){
	  
	  printf("%c", A[j + len - M]);
	  j++;}

	for(i = 0;i < len - M;i++){
		printf("%c", A[i]);
	}
	  
	//for(int i = len - m; i < len; i++)ss[i - len +  m] = s[i];
	//for(int i = 0; i < len - m; i++)ss[i + m] = s[i];
return 0;}

//C: 回文数(注意：这个练习告诉我们，应该多设置变量，最好在开头进行声明，后续再赋值，否则
//易出现混淆 
//程序中输入一个正整数(32位int可以存放下)，请判断他是否为回文数。
#include <stdio.h>
#include <string.h>
int main(){
	int n, i, j;//表示接下来要输入的样例数目和已输入的样例数目,以及字符串中的序号 
	char A[10000];//A[10000]为正序
	int x, a, y, b;
	scanf("%d", &n);
	for(i = 0; i < n; i++){
	scanf("%s", &A);
	int len = strlen(A);
	//分奇偶进行判断
	//先判断奇数
	if(len % 2 != 0){
		x = 0;
		a = (len - 1)/2;//后续的判断
		for(j = 0;j < a;j++){
			if(A[j] == A[len - 1 - j])  x++;}
		if(x == a){printf("Yes\n");}
		else  printf("No\n"); 
	}
	//再判断偶数 
	if(len % 2 == 0){
		y = 0;b = len/2;
		for(j = 0; j < b; j++){
			if(A[j] == A[len - 1 - j]) 
			y++;}
		if(y == b) {printf("Yes\n");}
		else  printf("No\n");
	}
}
	return 0;}
	
	//D: 电子表格（被判定为RE了） 
/*有一个r行c列(1<=r,c<=50)的电子表格，
行从上到下编号为1~r，列从左到右编号是1~c
SR x1 x2         SC y1 y2          DR x     DC y
交换x1行和x2行  交换y1列和y2列    删除第x行  删除第y列
IR x
在第x行上面插入一行，新插入的行的所有单元格值为0
IC y
在第y列前面插入一列，新插入的列的所有单元格值为0*/
//考虑建立二维数组
#include<stdio.h>
#include<string.h>
int main(){
int r,c,x,y,d,e,m,n,f,q;
int k1,k2,k3,k4,k5,k6;
int a[100][100]={00};
char b[100];
char g1[3]="SR";
char g2[3]="SC";
char g3[3]="DR";
char g4[3]="DC";
char g5[3]="IR";
char g6[3]="IC";
scanf("%d%d",&r,&c);
if(r>=1&&c<=50)
{for(x=1;x<r+1;x++)
{for(y=1;y<c+1;y++)
  {scanf("%d",&a[x][y]);} }}
scanf("%d\n",&n);
for(q=0;q<n;q++){
scanf("%s",b);
k1=strcmp(b,g1);
k2=strcmp(b,g2);
k3=strcmp(b,g3);
k4=strcmp(b,g4);
k5=strcmp(b,g5);
k6=strcmp(b,g6);
getchar();
if(k1==0)
{scanf("%d%d",&f,&m);
 getchar();
 for(x=1;x<c+1;x++)
 {d=a[f][x];
 e=a[m][x];
 a[f][x]=e;
 a[m][x]=d;}
 }
if(k2==0)
{scanf("%d%d",&f,&m);
 getchar();
 for(x=1;x<r+1;x++)
 {d=a[x][f];
  e=a[x][m];
  a[x][f]=e;
  a[x][m]=d;}
  }
if(k3==0)
{scanf("%d",&f);
 getchar();
 for(y=1;y<c+1;y++)
  {for(x=f;x<r;x++)
   a[x][y]=a[x+1][y];}
r=r-1;
}
if(k4==0)
{scanf("%d",&f);
 getchar();
 for(x=1;x<r+1;x++)
  {for(y=f;y<c;y++)
   a[x][y]=a[x][y+1];}
c=c-1;
}
if(k5==0)
{scanf("%d",&f);
 getchar();
 for(y=1;y<c+1;y++)
  {for(x=r;x>f-1;x--)
   {a[x+1][y]=a[x][y];}
  a[f][y]=0;}
r=r+1;
}
if(k6==0)
{scanf("%d",&f);
 getchar();
 for(x=1;x<r+1;x++)
  {for(y=c;y>f-1;y--)
   {a[x][y+1]=a[x][y];}
  a[x][f]=0;}
c=c+1;
}
}
for(x=1;x<r+1;x++)
 {for(y=1;y<c+1;y++)
    {printf("%d ",a[x][y]);}
    printf("\n");}
 return 0;
}

//D: 电子表格
/*有一个r行c列(1<=r,c<=50)的电子表格，
行从上到下编号为1~r，列从左到右编号是1~c
SR x1 x2         SC y1 y2          DR x     DC y
交换x1行和x2行  交换y1列和y2列    删除第x行  删除第y列
IR x
在第x行上面插入一行，新插入的行的所有单元格值为0
IC y
在第y列前面插入一列，新插入的列的所有单元格值为0*/
//考虑建立二维数组
#include<stdio.h>
#include<string.h>
int main(){
int r,c,x,y,d,e,m,n,f,q;
int k1,k2,k3,k4,k5,k6;
int a[100][100]={00};
char b[100];
char g1[3]="SR";
char g2[3]="SC";
char g3[3]="DR";
char g4[3]="DC";
char g5[3]="IR";
char g6[3]="IC";
scanf("%d%d",&r,&c);
if(r>=1&&c<=50)
{for(x=1;x<r+1;x++)
{for(y=1;y<c+1;y++)
  {scanf("%d",&a[x][y]);} }}
scanf("%d\n",&n);
for(q=0;q<n;q++){
scanf("%s",b);
k1=strcmp(b,g1);k2=strcmp(b,g2);k3=strcmp(b,g3);k4=strcmp(b,g4);k5=strcmp(b,g5);
k6=strcmp(b,g6);getchar();
if(k1==0)
{scanf("%d%d",&f,&m);getchar();
 for(x=1;x<c+1;x++)
 {d=a[f][x];e=a[m][x];a[f][x]=e;a[m][x]=d;}
 }
if(k2==0)
{scanf("%d%d",&f,&m); getchar();
 for(x=1;x<r+1;x++)
 {d=a[x][f];e=a[x][m];a[x][f]=e;a[x][m]=d;}
  }
if(k3==0)
{scanf("%d",&f);
 getchar();
 for(y=1;y<c+1;y++)
  {for(x=f;x<r;x++)
   a[x][y]=a[x+1][y];}
r=r-1;
}
if(k4==0)
{scanf("%d",&f);
 getchar();
 for(x=1;x<r+1;x++)
  {for(y=f;y<c;y++)
   a[x][y]=a[x][y+1];}
c=c-1;
}
if(k5==0)
{scanf("%d",&f);
 getchar();
 for(y=1;y<c+1;y++)
  {for(x=r;x>f-1;x--)
   {a[x+1][y]=a[x][y];}
  a[f][y]=0;}
r=r+1;
}
if(k6==0)
{scanf("%d",&f);
 getchar();
 for(x=1;x<r+1;x++)
  {for(y=c;y>f-1;y--)
   {a[x][y+1]=a[x][y];}
  a[x][f]=0;}
c=c+1;
}
}
for(x=1;x<r+1;x++)
 {for(y=1;y<c+1;y++)
    {printf("%d ",a[x][y]);}
    printf("\n");}
 return 0;
}

//E: n个不同整数的所有组合	
#include <cstring>
#include <iostream>
using namespace std;

void subset(int a[], int b[], int n,int len) //生成子集 共2^n个
{ if (n == len)
    {   cout << "-->";
        for (int i = 0; i < len; i++)
        {if (b[i] == 1)
                cout <<' '<< a[i];
        }
        cout<<endl;return;
    }
    b[n] = 1;
    subset(a, b, n + 1,len);
    b[n] = 0;
    subset(a, b, n + 1,len);
}

int main()
{
    int m;
    cin>>m;
    while(m--)
    {
        int n;
        cin >> n;
        int *number = new int[n];int *b = new int[n];
        for (int i = 0; i < n; i++)
        {cin >> number[i];
        }
        subset(number, b, 0, n);}
		return 0;}


//B: 字符串循环左移问题
/*#include <stdio.h>
#include <string.h>
int main(){
	//将一个字符串循环向左移M（M>=0）个字符位置，
	//即将字符串A中的数据由（A0 A1……AN-1）
	//变换为（AN-M …… AN-1 A0 A1……AN-M-1）
	//（N是字符串的长度，最后M个数循环移至最前面的M个位置）
	//每个输入包含一个测试用例，第1行输入M（M>=0）；第2行为输入字符串，长度不超过200。
    int M, i;
	int j = 0;//声明输入的希望左移的字符位置和数组的脚标 
	//建立数组来进行处理（冒泡排序作改编）
	char A[200];
	int a = 200;
	scanf("%d\n", &M);
	fgets(A, a, stdin);
    A[strlen(A)-1]='\0';
    int len = strlen(A);
	for(i = 0; i <= len - 1; i++){
	  if(i + M <= len - 1){
	  //A[i + M]==A[i];
	  printf("%c", A[i + M]);
	  }
}
	for(i = len - M;i <= len - 1;i++){
	  for(;j < i + M - len + 1;j++){
	  
	  printf("%c", A[j]);}
}
return 0;}*/
