//A: 递归法算年龄
//输入  输入三个正整数n、a和k（0<n,a,k<=100,n>=2）
//分别代表摆龙门阵的小伙伴的人数、第一号小伙伴的年龄和相邻编号小伙伴的年龄差 
//输出  若输入数据不合题意，输出Wrong Number ,否则输出第n号小伙伴的年龄 

#include <stdio.h>
int year(int n,int a,int k){
	if(n==1){return a;}
	else return k+year(n-1,a,k);} 
	int main(){
		int n,a,k;
		scanf("%d",&n);
		scanf("%d",&a);
		scanf("%d",&k);
		if(n>0&&n>=2&&a>0&&k>0&&a<=100&k<=100){
		printf("%d",year(n,a,k));
		return 0;}
		else printf("Wrong Number");
		return 0;
	}

//B: 小宇的数列
//输入  输入包含多组测试数据。每组输入5个整数，每个数字之间隔一个空格
//当5个数字都为0时输入结束
//输出  对于每组输入，若是第一种情况则输出提示信息case one...
//再换行输出这串数列的后面5个数字，每个数字之间隔一个空格
//若是多种情况同时满足(如既是等差又是等比数列)则按顺序依次输出
#include <stdio.h>
int main(){
	int a[100][5],i=0;
	for(;i<100;i++){
		scanf("%d %d %d %d %d",&a[i][0],&a[i][1],&a[i][2],&a[i][3],&a[i][4]); 
		if(a[i][0]==0&&a[i][1]==0&&a[i][2]==0&&a[i][3]==0&&a[i][4]==0) break;
	}
	for(int j=0;j<i;j++){
		if(2*a[j][3]==a[j][2]+a[j][4]){
			int x=a[j][4]-a[j][3],y=a[j][4];
		printf("case one\n%d %d %d %d %d\n",y+x,y+2*x,y+3*x,y+4*x,y+5*x);
		}
		if(a[j][3]*a[j][3]==a[j][2]*a[j][4]){
			int x=a[j][4]/a[j][3],y=a[j][4];
		printf("case two\n%d %d %d %d %d\n",y*x,y*x*x,y*x*x*x,y*x*x*x*x,y*x*x*x*x*x);	
		}
		if(a[j][4]==a[j][3]+a[j][2]){
			printf("case three\n");
			int x=a[j][3],y=a[j][4];
			for(int i=0;i<2;i++){
				x=x+y;
				y=x+y;
				printf("%d %d ",x,y);
			}
			printf("%d\n",x+y);
		}
	}
	return 0;
} 


//C: 查找字符串
//判断字符串是否满足要求。如果字符串满足以下要求之一的字符串输出YES，否则输出NO：
//1. 字符串等于“SCU”；
//2. 形如“xSCUx”的字符串,其中x是仅由字母A组成的字符串
//输入  每个测试输入包含1个测试用例。第1行给出一个自然数n (<10)，是需要检测的字符串个数
//接下来每个字符串占一行，字符串长度不超过100，且不包含空格。 
//输出  每个字符串的检测结果占一行，如果该字符串满足条件，则输出YES，否则输出NO
#include <stdio.h>
#include <string.h> 
int main()
{
	int n, m;//n表示决定输入的字符数量,m表示实际输入的字符数量 
	scanf("%d", &n);
	
	if(n>=10||n<0)
	return 0;//对第一行数字进行判断
	for(m=0;m<n;m++){
	
	
//字符串长度不超过100且不包含空格
//先分出SCU的情况
//正向检索A检索到最后一个A的时候，下一个出现S,下一个出现U，再下一个出现C
//其余情况输出NO
    
    char A[100];
	scanf("%s", A);//声明一个数组
    
	int i=0, len=strlen(A);//i为脚标 ，len为数组字符数量 
	
	while(i<=(len-1)){
	if(A[i]=='A'){i++;}	
	if(A[i]=='S'&&A[i+1]=='C'&&A[i+2]=='U'){i+=3;}
	if(A[i]!='A') break;
   } 
    if(i>(len-1)){printf("YES\n");}
    else
      printf("NO\n");}
	return 0;
}

//D: 成绩排名
//读入n名学生的姓名、身份证号、成绩，分别输出成绩最高和成绩最低学生的姓名和身份证号
//注意：学生名单中可能缺考，没有成绩，表示为n/a.
//每个测试输入包含1个测试用例，格式为  第1行：正整数n (1<=n<=100)
//第2行：第1个学生的姓名 学号 成绩
//第3行：第2个学生的姓名 学号 成绩 
//输出  对每个测试用例输出2行，第1行是成绩最高学生的姓名和学号
//第2行是成绩最低学生的姓名和学号，项与项之间有1个空格。如果成绩最高的学生有多个，输出姓名字典序最小的那个
//如果成绩最低的有多个，输出姓名字典序最大的那个 
#include <stdio.h>
#include <string.h>
int main(){
	struct student{
		char name[11];
		char id[19];
		int grade;	};
        struct student A[10000];
        int n,True=0;
        scanf("%d",&n);
        for(int i=0;i<n;i++){
        	char R[5];
			A[i].grade=-1;
		scanf("%s %s %d",&A[i].name,&A[i].id,&A[i].grade);
			if(A[i].grade==-1){gets(R);}
			if(A[i].grade!=-1){True=1;} 
		} 
		if(True){
		int min=100,max=0,i=0,a=0;
		for(int j=0;j<n;j++){
			if(A[j].grade==-1){continue;}
			if(A[j].grade>max){max=A[j].grade;a=j;}
			if(A[j].grade==max&&strcmp(A[j].name,A[a].name)<=0){max=A[j].grade;a=j;}
			if(A[j].grade<min){min=A[j].grade;i=j;}
			if(A[j].grade==min&&strcmp(A[j].name,A[i].name)>=0){min=A[j].grade;i=j;}
		}
		printf("%s %s\n",A[a].name,A[a].id);
		printf("%s %s\n",A[i].name,A[i].id);
		} 
		return 0;
}

//E: 查找成绩排名
//读入n名学生的姓名、身份证号、成绩。
//查找并输出匹配查找串的学生的姓名和学号和成绩。学生名单中可能缺考，没有成绩，表示为n/a
//如果查找串是针对姓名或者身份证号，则是模糊查找
//即只要其中包含查找串(区分大小写)即算满足条件，如果查找串是针对成绩，则是精确查找。
//输出  输出包含相应查找串的学生信息(姓名 学号 成绩  排名)(如果成绩为n/a，则排名就为n/a)
//项之间用空格隔开。每个学生一行。其中排名是按照成绩降序排列的排名。
//如果有多个学生的成绩相同，则这些学生的排名相同，并且随后的几个排名将跳过。
//满足条件的多个学生按照输入的顺序输出
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
int main(){
	struct student{
		char name[11];
		char id[19];
		int grade;
		int rank;	};
        struct student A[1000],W;
        int n,len;
        char str1[20],str2[20];
        scanf("%d %s",&n,&str1);
        len=strlen(str1);
        for(int i=0;i<n;i++){
        	char R[5];
			A[i].grade=-1;
		scanf("%s %s %d",&A[i].name,&A[i].id,&A[i].grade);
			if(A[i].grade==-1){gets(R);}
		} 
		for(int a=0;a<n;a++){
			for(int b=a;b<n;b++){
				if(A[a].grade<A[b].grade){
					W=A[a];
					A[a]=A[b];
					A[b]=W;
				}
				A[a].rank=a;
				if(a>0&&A[a].grade==A[a-1].grade){A[a].rank=A[a-1].rank;}
			}
		}
		for(int a=0;a<n;a++){
			for(int b=0;b<20;b++){
				for(int m=0,c=b;c<b+len;c++,m++){
					str2[m]=A[a].id[c]; 
							}
			if(strcmp(str1,str2)==0){
			printf("%s %s ",A[a].name,A[a].id);
			if(A[a].grade==-1){printf("n/a n/a\n");}
			else {printf("%d %d\n",A[a].grade,A[a].rank+1);}
			goto A;}
				}
			for(int b=0;b<20;b++){
				for(int m=0,c=b;c<b+len;c++,m++){
					str2[m]=A[a].name[c];}            
				if(strcmp(str1,str2)==0){
			    printf("%s %s ",A[a].name,A[a].id);
			    if(A[a].grade==-1){printf("n/a n/a\n");}
			    else printf("%d %d\n",A[a].grade,A[a].rank+1);
				goto A;}   
				}
			    if(atoi(str1)==A[a].grade){
			printf("%s %s %d %d",A[a].name,A[a].id,A[a].grade,A[a].rank+1);
			goto A;
			} 
			A:;
			}
		return 0;
		}
