//A: 平方根
//输入 第1行是一个整数n，表示随后有n组数据
//每组数据占一行，包含一个整数m(-10000<=m<=10000)
//输出  对每组数据m，计算m的平方根，精确到小数点后2位。如果m没有平方根，则输出ERROR
/*#include<iostream>
#include<math.h>
using namespace std;

int main(){
	int n;
	cin>>n;
	while(n--){
		double m;
		cin>>m;
		if(m>=0){
			printf("%.2lf", sqrt(m));
			printf("\n");
			}
		else{
		    printf("ERROR");
			printf("\n");
	}
	
}
	return 0;
}*/

//B: 第二小的整数
//找出整数序列中第二小的数
//输入  第1行是一个整数n，表示随后有n组数据
//每组数据占一行，第一个整数m(1<=m<=100)，表示随后有m个整数
//输出  对每组数据，输出第二小的数。如果第二小的数不存在，则输出ERROR
/*#include<iostream>
#include<algorithm>
using namespace std;

int newnum[102];
int main(){
	int n;
	cin>>n;
	while(n--){
		int m;
		cin>>m;
		int num[m];
		int i=0;
		int j=0;
		for(i=0;i<m;i++){
			cin>>num[i];
		}
		for(j=0;j<m;j++){//从第一个开始比较 
		for(i=j;i<m;i++){//第一次不会满足a[j]>a[i},因此进入i+1，再进行比较 
			if(num[j]>num[i]){//这个是把第一个（之后是第二个......）和后面的每一个进行比较再排序 
			int t=num[i];
			num[i]=num[j];
			num[j]=t;
			}
		}
	}
		//for(i=0;i<m;i++){
			//cout<<num[i];
		//}
		int pos=0;
		
		for(i=0;i<m;i++){
			for(j=0;j<pos;j++){
					if(num[i]==newnum[j])break;
				}

				if(j==pos){
					newnum[pos]=num[i];
					pos++;
				}
		}
		//cout<<pos<<endl;
		//for(int i=0;i<pos;i++){
			//cout<<newnum[i];
		//}
		if(m<2||pos<2){
			printf("ERROR");
			printf("\n");
		}
		else{
			printf("%d", newnum[1]);
			printf("\n");
		}	
		
	}
	return 0;
}*/

