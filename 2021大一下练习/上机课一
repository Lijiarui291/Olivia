//第一题：输入一个整数，代表输入数组个数，将每个数组(定长为10)的值逆序输出(要求用函数实现)。
//法一：
#include<iostream>
#include<algorithm>
using namespace std;

int main() {
	int k;
	cin >> k;
	int num[11];
	while (k--) {
		for (int i = 0;i < 10;i++) {
			cin >> num[i];
		}
		reverse(num, num + 10);
		for (int i = 0;i < 9;i++) {
			cout << num[i] << " ";
		}
		cout << num[9] << endl;
	}
	
	return 0;                                                         

}
//法二：
#include<iostream>
#include<algorithm>
using namespace std;
int num[11];
void daoxu() {
	for (int i = 0;i < 10;i++) {
		cin >> num[i];
	}
	for (int i = 9;i >= 1;i--) {
		cout << num[i] << " ";
	}
	cout << num[0];
}

int main() {
	int k;
	cin >> k;
	while (k > 1) {
		daoxu();
		cout << endl;
		k--;
	}
	daoxu();

	return 0;
}

//第二题：编写一个函数，实现在字符串的每两个字符之间都插入一个字符，如原字符串为abc，插入字符为t则新串为atbtct。在调用该函数实现字符串转换，并输出转换后的新串。
#include<iostream>
#include<string.h>
using namespace std;
string add;
string yuanzifu;
void mubiao(string add, string yuanzifu) {
	int len = yuanzifu.length();
	for (int i = 0;i < len;i++) {
		cout << yuanzifu[i] + add;
	}
}

int main() {
	cin >> add;
	cin >> yuanzifu;
	mubiao(add, yuanzifu);

	return 0;
}

//第三题：在矩阵（不存在相等的值）中，一个数在所在行中是最大值，在所在列中是最小值，则被称为鞍点。设计程序，求出矩阵中的鞍点，存在输出该鞍点的值，不存在则输出no。
#include<iostream>
#include<algorithm>
using namespace std;
int num[8][8];
int cnt = 0;
int maxnum[8];//存储行最大值
int minnum[8];//存储列最小值
void maxhang(int i) {
	int maxx = num[i][0];
	for (int j = 0;j <= 6;j++) {
		maxx = max(maxx, num[i][j]);
	}
	maxnum[i] = maxx;
}
void minlie(int j) {
	int minn = num[0][j];
	for (int i = 0;i <= 6;i++) {
		minn = min(minn, num[i][j]);
	}
	minnum[j] = minn;
}

int main() {
	for (int i = 0;i < 7;i++) {
		for (int j = 0;j < 7;j++) {
			cin >> num[i][j];
		}
	}
	for (int i = 0;i <= 6;i++) {
		maxhang(i);
	}
	for (int j = 0;j <= 6;j++) {
		minlie(j);
	}
	for (int i = 0;i < 7;i++) {
		for (int j = 0;j < 7;j++) {
			if (num[i][j] == maxnum[i] && num[i][j] == minnum[j]) {
				cout << num[i][j]<<" ";
				cnt++;
			}
		}
	}
	if (cnt == 0) { cout << "no"; }
	return 0;

}


