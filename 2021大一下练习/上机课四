1.对于一个有正数和负数的数组，将其中所有小于0的元素放到所有大于0的元素的前面。使用的算法是:从左右两个方向扫描数组，从左向右找到大于等于0的元素，从右向左找到小于0的元素，将两者交换
#include<iostream>
#include<algorithm>
using namespace std;
class ARR {
public:
	ARR(int x[], int size);//构造函数，用参数size初始化n,用x数组初始化a数组
	void change();//使用以上算法，完成调换数组元素的工作
	void show();//输出a数组的值
private:
	int n;//数组实际元素个数
	int a[100];//初始时存放原始数据，最终存放交换后的数组
};
ARR::ARR(int x[], int size) {
	for (int i = 0;i < size;i++) {
		a[i] = x[i];
	}
	n = size;
}
void ARR::show() {
	for (int i = 0;i < n;i++) {
		cout << a[i] << " ";
	}
	cout << endl;
}
void ARR::change() {
	int tempon[20];//大于等于0
	int tempdown[20];//小于0
	int ii = 0;
	int iii = 0;
	for (int i = 0;i < n;i++) {//从左往右扫
		for (int j = n - 1;j >= 0;j--) {//从右往左扫
			if (a[i] >= 0 && a[j] < 0 && j > i) {
				int t = a[i];
				a[i] = a[j];
				a[j] = t;
				//cout << t << "<->" << a[i] << " ";
				break;
			}
		}
	}
}
int main() {
	//int b[10];
	/*for (int i = 0;i < 10;i++) {
		cin >> b[i];
	}*/
	int b[10] = { 1,-3,-1,3,2,4,-4,5,-5,-2 };
	ARR v(b, 10);
	v.show();
	v.change();
	v.show();
	return 0;
}


2.试定义 RECT 类（长方形）及其派生类 CUB（长方体），具体要求如下：
（1）类 RECT 的成员如下：
（a）保护数据成员 double x,y; 分别表示长方形的长和宽。
（b）公有成员函数 RECT（double x1,double y1）；构造函数，分别用 x1、y1 初始化 x 和 y。
virtual double area( ); 虚函数，计算长方形的面积，计算公式：面积=长×宽。
double peri( ); 计算长方形的周长。计算公式：周长=2×长+2×宽。
virtual int isSquare( ); 虚函数，判断是否为正方形，如是，返回 1；否则返回 0。
（2） 类 CUB 为类 RECT 的公有派生类，其成员如下：
（a） 私有数据成员 double height; 表示长方体的高度。
（b） 公有成员函数 CUB( ); 构造函数，用 h、x、y 分别初始化 height 及其基类成员 x 和 y。
double volume( ); 计算长方体的体积。计算公式：体积=底面积×高，其中底面积通过调用基类成 员函数 area( )计算。
double area(); 计算长方体的表面积。计算公式：表面积=2×底面积+底面周长×高度。底面积和底 面周长分别调用基类成员函数 area()和 peri()计算。
int isSquare();判断是否为正方体，如是，返回 1，否则返回 0。在判断过程中，首先调用基类的成员函数 isSquare()判断底面是否为正方形。
（3）在主函数中，创建一个 CUB 对象 cu 和一个 RECT 指针*re，并使 re 指向 cu。通过 cu 调用 volume()， 计算并输出长方体的体积；通过 re 调用 area()和 isSquare()，计算并输出长方体的表面积，并判断是否为正方体。
#include<iostream>
using namespace std;
class RECT {
public:
	RECT(double x1, double y1);//构造函数，分别用x1,y1初始化x,y
	virtual double area() {//虚函数，计算长方形的面积，计算公式：面积=长*宽
		return x * y;
	}
	double peri();//计算长方形的周长，计算公式：周长=2*(长+宽）
	virtual int isSquare() {//虚函数，判断是否是正方形，如是返回1，如否返回0
		if (x == y) { return 1; }
		else return 0;
	}
protected:
	double x, y;//分别表示长方形的长和宽
};
class CUB :public RECT {
public:
	CUB(double x, double y, int h) :RECT(x, y) {//构造函数，分别用h,x,y初始化height和基类成员x,y
		height = h;
	}
	double volume() {//计算长方体的体积，体积：底面积*高，其中底面积调用基类函数area()
		double a = RECT::area() * height;
		cout << a << endl;
		return 1;
	}
	double area() {/*计算长方体的表面积，表面积：2*底面积+底面周长*高度，其中底面积调用基类函数area(),
	底面周长调用peri()*/
		double b = 2 * RECT::area() + RECT::peri() * height;
		cout << b << endl;
		return 1;
	}
	int isSquare() {//判断是否正方体，如是返回1，如否返回0，先调用基类函数isSquare()判断底面是否是正方形
		if (RECT::isSquare()) {
			if (height == x && height == y) { cout << "1"; }
			else cout << "0";
			cout << endl;
		}
		else {
			cout << "0";
			cout << endl;
		}
		return 1;
	}
private:
	double height;//长方体的高
};
RECT::RECT(double x1, double y1) {
	x = x1;y = y1;
}
double RECT::peri() {
	return 2 * (x + y);
}

int main() {
	cout << "Please enter the length,the width and the height of the rectangle:";
	int x1;int y2;int h;
	cin >> x1;cin >> y2;cin >> h;
	CUB cu(x1, y2, h);
	RECT* re = &cu;
	cout << "The area of the rectangle is:";
	re->area();//输出表面积
	cout << "The volume of the rectangle is:";
	cu.volume();//输出长方体的体积
	cout << "The rectangle is square or not:";
	cu.isSquare();//判断是否为正方体
	return 0;

}
